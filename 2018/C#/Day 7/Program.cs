using System;
using System.Collections.Generic;
using Helpers;

namespace Day_7
{
    using System.Linq;
    using System.Text.RegularExpressions;


    internal static class Program
    {
        private static void Main(string[] args)
        {
            // List<string> input = Helper.ReadStringArrayFromFile(@"\Day 7 Raw Input.txt");
            var input = Helper.ReadStringArrayFromFile(@"\Day 7 Example Raw Input.txt");

            var masterList = GetMasterRequirementsList(input);

            // build unique list of all step names
            // I'm sure there's a way to one-line this, but this is more read-able.
            var stepsToExecute = GetStepsToExecute(masterList);

            var stepsCompleted = new List<string>();

            foreach (var step in stepsToExecute)
            {
                
            }
        }

        /// <summary>
        /// GIven list of steps, build list of required steps for each step.
        /// </summary>
        /// <param name="input">List of steps from input file</param>
        /// <returns>Dictionary containing required steps for each step</returns>
        /// <exception cref="Exception">Will be thrown if regex finds less than 2 matches per line</exception>
        private static Dictionary<string, List<string>> GetMasterRequirementsList(List<string> input)
        {
            var rx = new Regex(@"\b[A-Z]\b");
            var masterList = new Dictionary<string, List<string>>();


            return masterList;
        }

        /// <summary>
        /// Find all unique step names across all prerequisites (steps and step requirements).
        /// </summary>
        /// <param name="masterList">list generated by GetMasterRequirementsList</param>
        /// <returns>a List of unique steps to execute for Sleigh assembly</returns>
        private static HashSet<string> GetStepsToExecute(Dictionary<string, List<string>> masterList)
        {
            var stepsToExecute = new HashSet<string>();
            foreach (var key in masterList.Keys)
            {
                stepsToExecute.Add(key);
            }

            foreach (var list in masterList.Values)
            {
                foreach (var item in list)
                {
                    stepsToExecute.Add(item);
                }
            }

            return stepsToExecute;
        }
    }
}
